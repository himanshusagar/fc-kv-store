#include "fc_kv_store.grpc.pb.h"

#include <grpcpp/ext/proto_server_reflection_plugin.h>
#include <grpcpp/grpcpp.h>
#include <signal.h>

using grpc::Channel;
using grpc::ClientContext;
using grpc::Status;

using fc_kv_store::FCKVStoreRPC;
using fc_kv_store::GetRequest;
using fc_kv_store::GetResponse;
using fc_kv_store::PutRequest;
using fc_kv_store::PutResponse;
using fc_kv_store::VersionStruct;

class FCKVStoreRPCClient
{
public:
  FCKVStoreRPCClient(std::shared_ptr<Channel> channel)
      : stub_(FCKVStoreRPC::NewStub(channel)) {}

  int Get(string key);
  int Put(string key, string value);
  
private:
  // gRPC
  std::unique_ptr<FCKVStoreRPC::Stub> stub_;
  // local version struct
  std::unique_ptr<VersionStruct> version_;
  // version structs belonging to other users
  std::vector<std::unique_ptr<VersionStruct>> versions_;

  // acquires global lock on server
  // updates local copies of version lists as returned by the server
  //               do we need to rollback if we abort this operation??
  Status StartOp();

  // releases global lock on server
  // sends updated version struct to server
  Status CommitOp();

  // aborts the operation - releases the lock, do not send version struct
  Status AbortOp();
};
